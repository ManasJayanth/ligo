Random notes & TODOs about pattern matching anomalies detection
Ref: http://moscova.inria.fr/~maranget/papers/warn/warn.pdf
1. [WORKS AS EXPRECTED] Unit pattern matching
 (match action with
  | () -> 1)

2. [DONE] How to treat unit patterns?
   a. Wildcard

3. [DONE] Convert LIGO pattern language to a simple pattern language with only
   a. wildcards
   b. constructors
   ---
   | P_unit    -> constructor #UNIT
   | P_var     -> wildcard
   | P_list    -> constructors #CONS & #NIL
   | P_variant -> constructor ...
   | P_tuple   -> simple_pattern list
   | P_record  -> simple_pattern list

4. [DONE] Implement functions for specialization of matrix & default matrix
   (* Done - need to test  *)
5. [DONE] Implement Algorithm I for missing cases (exhaustiveness check)

6. [DONE] Implement Algorithm Urec for useless cases (redundant pattern check)

7. [DONE] Once missing pattern is detected, give understandable error messages
   a. [DONE] add more contructors which are missing
   b. [DONE] convert tuple to original record/tuple (Convert to original pattern lang)

8. [DONE] Write a lot of test cases
   [DONE] Missing case:
   a. constructors
   b. constructors (constructors)
   c. tuple (constructors)
   d. record (constructors)
   e. constructors (tuple (constructors))
   f. constructors (record (constructors))
   g. tuple (tuple (constructor))
   h. tuple (record (constructor))
   i. record (tuple (constructor))
   j. record (record (constructor))
   [DONE] Redundant case:
   a. c1, c1, c2, c3
   b. c1, c2, c1, c3
   c. c1, c2, c3, c1
   d. c1, c2, c3, _
   e. c1, _, c2, c3
   f. _, c1, c2, c3
   g. tuple_x, tuple_x, tuple_y
   h. tuple_x, _, tuple_y
   i. _, tuple_x, tuple_y
   j. record_x, record_x, record_y
   k. record_x, _, record_y
   l. _, record_x, record_y
   ... Ask for more test cases if something missed ...

9. [DONE] Warning : this pattern-matching is not exhaustive.
   Here is an example of a case that is not matched: []
    let rec last xs = 
    match xs with
        x::[] -> x
    | _::xs -> last xs